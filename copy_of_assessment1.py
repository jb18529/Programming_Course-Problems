# -*- coding: utf-8 -*-
"""Copy of assessment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s7cVu8wbbMGsuoZjPPUItChdsO9y4R8l

## COMP4008 Programming: Assessment 1
"""

# Name = Joel Braganza 
# Student ID: 20508981

"""**Exercise 1.** In the next block, write a function *creditCardBill* that takes a list of integer numbers that represent purchases on a credit card in pounds. Calculate the total bill, based on the following rules:
* the bill consists of the sum of all the numbers in the list,
* plus an interest payment of 5% for each individual purchase under 100
* plus an interest payment of 3% for each individual purchase of 100 pounds or more

this total bill should then be returned by the function.

So, for example, if the list was [175,45,165] then the total bill would be:
* 385 for the initial sum
* plus 3% of 175, i.e. 5.25
* plus 5% of 45, i.e 2.25
* plus 3% of 165, 4.95

so the total returned would be 397.45.

This should take around 8 lines of Python
"""

def creditCardBill(purchases):
  total = sum(purchases)
  for x in purchases:
    if x >= 100:
      total += (0.03 * x)
    else:
      total += (0.05 * x)
  return total

"""In the following block, write a few lines that creates a couple of example lists and tests your function on them"""

y = [175, 45, 165]
z = [200, 5, 99, 712, 354, 55]
b = [100, 100, 200]

print(creditCardBill(y))
print(creditCardBill(z))
print(creditCardBill(b))

"""**Exercise 2.** In the next block, write a function *oddEven* that takes a list of eight numbers each in the range 0-9, counts how many are odd and how many even. 
* if 8 are even or 8 are odd, it prints "big win"
* if 7 are even or 7 are odd, it prints "small win"
* otherwise, it prints "lose"

This should take around 14 lines of Python
"""

def oddEven(number):
  odd, even = 0, 0
  for x in number:
    if x % 2 == 0:
      #even
      even += 1
    else:
      #odd
      odd += 1
  if odd == 8 or even == 8:
    return "big win"
  elif odd == 7 or even == 7:
    return "small win"
  else:
    return "lose"

"""In the next block, create a list that consists of the eight digits of **your** student ID number, and runs the *oddEven* function on that list."""

#student id = 20508981
l = [2, 0, 5, 0, 8, 9, 8, 1]
print(oddEven(l))

"""**Exercise 3.** In the next block, write a function *coinGame* that implements the following game:
* a player starts with a score of zero
* each round, they flip a coin
* if the coin is a head, they add one to their score
* if the coin is a tail, they subtract one from their score
* print the value of the coin flip and the current score
* if the score gets to -5, then the player loses: return the word "lose"
* if the score gets to 5, then the player wins: return the word "win"
* the player cannot decide to stop playing: they continue until they win or lose

This should take around 12 lines of Python.
"""

import random
def coinGame():
  score = 0
  while True:
    # 0 is heads, 1 is tails
    coin = random.randint(0,1)
    if coin == 0:
      score += 1
      if score == 5:
        return "win"
    else:
      score -= 1
      if score == -5:
        return "lose"

"""In the next block, run your code to test it:"""

print(coinGame())

"""**Exercise 4:** This exercise is concerned with lists of student data, of the following kind. Each item in the list is itself a list containing three items: a text string that is the student's name, then a number from 1-3 that is the student's year, and then a list of the marks (numbers from 0-100) that are their marks in each module. Here is an example of a list of this kind:"""

studentList = []
studentList.append(["Eddard Stark", 3, [55,56,41,54,57,64,56,54]])
studentList.append(["Daenerys Targaryen", 2, [43,75,56,84,34,43,56,23]])
studentList.append(["Arya Stark", 1, [56,67,86,36,71,55,28]])
studentList.append(["Joffrey Baratheon", 2, [23,49,34,17,3,45,25,23]])
studentList.append(["Tyrion Lannister",3,[79,68,83,86,84,95,58,85]])

"""In the next block, write a function *calculateStudentResults* that goes through each student, calculates the average mark for that student, and prints out the student's name, their average mark, and whether they have passed the year. To pass, students need to get:
* an average of 40 or higher in year 1
* an average of 50 or higher in year 2
* an average of 60 or higher in year 3

If they get a lower average, they fail.

This should take around 18 lines of Python.
"""

def calculateStudentResults(studentList):
  l = []
  for x in studentList:
    average = sum(x[2]) / len(x[2])
    if x[1] == 1 and average > 40:
      print(x[0], "average =", average, "result = pass")
    elif x[1] == 2 and average > 50:
      print(x[0], "average =", average, "result = pass")
    elif x[1] == 3 and average > 60:
      print(x[0], "average =", average, "result = pass")
    else: 
      print(x[0], "average =", average, "result = fail")

"""In the next block, run your code to test it:"""

print(calculateStudentResults(studentList))

"""**Exercise 5:** Write a function *buySell* that takes a list of integer numbers (which represent stock prices on successive days), and loops through that list, and creates a new list called *actions*
* if for the last five prices, the price has always increased relative to the previous price in the list, add the word "sell" to the *actions* list
* if for the last five prices, the price has always decreased relative to the previous price in the list, add the word "buy" to the *actions* list
* otherwise, add the word "hold" to the *actions* list

For example, if the list was: [10,10,30,40,35,20,30,40,50,60,70,40,50,30,25,21,19,17,20], then *actions* would be: ["hold","hold","hold","hold","hold","hold","hold","hold","hold","hold","sell","hold","hold","hold","hold","hold","hold","buy","hold"]

Finally, the function returns *actions*.

This should take around 20 lines of Python.
"""

def buySell(numbers):
  #first five actions will always be hold
  actions = ["hold", "hold", "hold", "hold","hold"]
  x, y, i = 0, 6, 0
  while i < (len(numbers) - 5):
    total = 0
    compare = numbers[x]
    for m in numbers[x:y]:
      if m > compare:
        total += 1
      elif m < compare:
        total -= 1
      compare = m
    if total == 5:
      actions.append("sell")
    elif total == -5:
      actions.append("buy")
    else:
      actions.append("hold")
    x += 1
    y += 1
    i += 1
  return actions

"""In the next block, write code that creates a list (you can use the list from earlier) and tests the function *buySell* on it"""

prices = [10, 10, 30, 40, 35, 20, 30, 40, 50, 60, 70, 40, 50, 30, 25, 21, 19, 17, 20]
print(buySell(prices))

"""**The End.** follow the instructions on Moodle to submit your work."""